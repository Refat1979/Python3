{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import sys\nimport re\nimport os\nimport shutil\nimport subprocess","metadata":{"execution":{"iopub.status.busy":"2024-05-07T14:52:20.499329Z","iopub.execute_input":"2024-05-07T14:52:20.499705Z","iopub.status.idle":"2024-05-07T14:52:20.527801Z","shell.execute_reply.started":"2024-05-07T14:52:20.499678Z","shell.execute_reply":"2024-05-07T14:52:20.526870Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"def get_special_paths(dirname):\n    result = []\n    paths = os.listdir(dirname)  # list of paths in that dir\n    for fname in paths:\n        match = re.search(r'__(\\w+)__', fname)\n        if match:\n            result.append(os.path.abspath(os.path.join(dirname, fname)))\n    return result","metadata":{"execution":{"iopub.status.busy":"2024-05-07T14:52:29.822440Z","iopub.execute_input":"2024-05-07T14:52:29.822829Z","iopub.status.idle":"2024-05-07T14:52:29.829591Z","shell.execute_reply.started":"2024-05-07T14:52:29.822800Z","shell.execute_reply":"2024-05-07T14:52:29.827497Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"def copy_to(paths, to_dir):\n  \"\"\"Copy all of the given files to the given dir, creating it if necessary.\"\"\"\n  if not os.path.exists(to_dir):\n    os.mkdir(to_dir)\n  for path in paths:\n    fname = os.path.basename(path)\n    shutil.copy(path, os.path.join(to_dir, fname))","metadata":{"execution":{"iopub.status.busy":"2024-05-07T14:52:57.884688Z","iopub.execute_input":"2024-05-07T14:52:57.885072Z","iopub.status.idle":"2024-05-07T14:52:57.891497Z","shell.execute_reply.started":"2024-05-07T14:52:57.885044Z","shell.execute_reply":"2024-05-07T14:52:57.890407Z"},"trusted":true},"execution_count":3,"outputs":[]}]}